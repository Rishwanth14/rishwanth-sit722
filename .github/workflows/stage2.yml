name: Stage 2 — Staging Provision, Deploy, Test, Destroy

on:
  workflow_run:
    workflows: ["Stage 1 CI — Test, Build & Push to ACR"]
    types: [completed]
  workflow_dispatch:

env:
  LOCATION: australiaeast
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: latest
  STAGING_RG: rsit722-week10-rg
  STAGING_PLAN: sit722-prod-plan-rish

jobs:
  staging:
    name: Provision, Deploy to Staging, Test, Destroy
    runs-on: ubuntu-latest
    if: >
      ${{
        github.event_name == 'workflow_run' &&
        github.event.workflow_run.conclusion == 'success' &&
        github.event.workflow_run.head_branch == 'testing'
      }} || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (SPN)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure Resource Group
        run: |
          az group create -n "${{ env.STAGING_RG }}" -l "${{ env.LOCATION }}"

      - name: Ensure App Service Plan (Linux, B1)
        run: |
          az appservice plan show \
            --name "${{ env.STAGING_PLAN }}" \
            --resource-group "${{ env.STAGING_RG }}" \
            || az appservice plan create \
                 --name "${{ env.STAGING_PLAN }}" \
                 --resource-group "${{ env.STAGING_RG }}" \
                 --location "${{ env.LOCATION }}" \
                 --is-linux \
                 --sku B1

      - name: Derive ACR name and login
        id: acr
        shell: bash
        run: |
          ACR_NAME="${ACR_LOGIN_SERVER%%.*}"
          echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
          az acr login --name "$ACR_NAME" || true

      - name: Create/Update Staging WebApps
        run: |
          PROD_APP="week10-staging-product-rish-${{ github.run_id }}"
          ORDER_APP="week10-staging-order-rish-${{ github.run_id }}"
          CUST_APP="week10-staging-customer-rish-${{ github.run_id }}"

          for APP in "$PROD_APP:product_service" "$ORDER_APP:order_service" "$CUST_APP:customer_service"; do
            NAME="${APP%%:*}"
            IMAGE="${APP##*:}"
            echo "Deploying $NAME -> $IMAGE"
            az webapp create \
              --resource-group "${{ env.STAGING_RG }}" \
              --plan "${{ env.STAGING_PLAN }}" \
              --name "$NAME" \
              --deployment-container-image-name "${{ env.ACR_LOGIN_SERVER }}/$IMAGE:${{ env.IMAGE_TAG }}" \
              || az webapp config container set \
                   --resource-group "${{ env.STAGING_RG }}" \
                   --name "$NAME" \
                   --docker-custom-image-name "${{ env.ACR_LOGIN_SERVER }}/$IMAGE:${{ env.IMAGE_TAG }}" \
                   --docker-registry-server-url "https://${{ env.ACR_LOGIN_SERVER }}" \
                   --docker-registry-server-user "${{ secrets.ACR_USERNAME }}" \
                   --docker-registry-server-password "${{ secrets.ACR_PASSWORD }}"
          done

      - name: Restart apps and warm up
        run: |
          for APP in $(az webapp list -g "${{ env.STAGING_RG }}" --query "[].name" -o tsv); do
            az webapp restart -g "${{ env.STAGING_RG }}" -n "$APP"
          done
          sleep 25

      - name: Destroy only staging WebApps (keep RG + Plan alive)
        if: always()
        run: |
          for APP in $(az webapp list -g "${{ env.STAGING_RG }}" --query "[].name" -o tsv); do
            echo "Deleting $APP..."
            az webapp delete -g "${{ env.STAGING_RG }}" -n "$APP"
          done
